// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

     PARTS:

     /* decode instruction */
       And(a=instruction[15], b=instruction[5], out=writeA1);
       And(a=instruction[15], b=instruction[4], out=writeD);
       And(a=instruction[15], b=instruction[3], out=writeM);
       Not(in=instruction[15], out=ainstruction);
       Or(a=ainstruction, b=writeA1, out=writeA);
       Wire6(in=instruction[6..11], out=c); // debug only and I fucking hate this language...
     
     /* mux memory input to ALU*/
       Mux16(a=aout, b=inM, sel=instruction[12], out=amout);
       Mux16(a=aluout, b=instruction, sel=ainstruction, out=regin);

     /* Registers */
       DRegister(in=regin, load=writeD, out=dout);
       ARegister(in=regin, load=writeA, out=aout);
       Wire16(in=aluout, out=outM);

       Wire15of16(in=aout, out=addressM);
       
       /* ALU */
       ALU(
         x=dout,
         y=amout,
         zx=instruction[11],
         nx=instruction[10],
         zy=instruction[9],
         ny=instruction[8],
         f =instruction[7],
         no=instruction[6],
         // out:
         out=aluout,
         zr=zr,
         ng=ng
       );
       
       JumpLogic(zr=zr,ng=ng,j=instruction[0..2],cinstruction=instruction[15],out=jump);
       
       Not(in=jump, out=njump);
       Mux16(a=pcx, b=aout, sel=jump, out=pcxnext);
       PC(in=pcxnext, load=jump, inc=njump, reset=reset, out=pcx);
       Wire15of16(in=pcx, out=pc);
}
